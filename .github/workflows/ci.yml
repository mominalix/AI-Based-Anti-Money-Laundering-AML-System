name: AML Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort spectral-cli
    
    - name: Lint Python code
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 services/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        black --check services/
        isort --check-only services/
    
    - name: Validate OpenAPI specs
      run: |
        npx @stoplight/spectral-cli lint contracts/openapi/*.yaml

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ingestion, feature-engine, risk-scorer, graph-analysis, alert-manager, gateway]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies for ${{ matrix.service }}
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Run unit tests for ${{ matrix.service }}
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  contract-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Pact CLI
      run: |
        npm install -g @pact-foundation/pact-node
    
    - name: Run contract tests
      run: |
        # This would run Pact consumer tests
        echo "Contract tests would run here"
        # pact-broker publish pacts/ --consumer-app-version=${{ github.sha }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, contract-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      run: |
        docker compose up -d --build
        
        # Wait for services to be healthy
        timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Wait for all services to be ready
        sleep 30
        
        # Test service health endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8001/health
        curl -f http://localhost:8002/health
        curl -f http://localhost:8003/health
        curl -f http://localhost:8004/health
        curl -f http://localhost:8005/health
        
        # Test end-to-end workflow
        python tests/e2e/test_workflow.py
    
    - name: Collect service logs
      if: failure()
      run: |
        docker compose logs > service-logs.txt
    
    - name: Upload logs as artifact
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: service-logs
        path: service-logs.txt
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [ingestion, feature-engine, risk-scorer, graph-analysis, alert-manager, gateway]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # This would typically deploy to a staging Kubernetes cluster
        # kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging"
        # curl -f https://staging.aml-system.com/health

  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        echo "Running performance tests"
        # This would run load tests using tools like k6 or Artillery
        # k6 run tests/performance/load-test.js 